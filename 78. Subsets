Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.
给出一个数组的所有子集

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

Code：
import Queue
class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        q = Queue.Queue()
        q.put(([],0))
        result = []
        N = len(nums)
        while not q.empty():
            r = q.get()
            result.append(r[0])
            lens = len(r[0])
            index = r[1]  //设置index，index之前的元素已经被遍历过了
            # print r[0]
            for i in range(r[1],N):
                temp = []
                for j in r[0]:    //复制一遍数组
                    temp.append(j)   
                if nums[i] in temp:
                    continue
                temp.append(nums[i])
                index = i
                # print r[0]
                q.put((temp,index))
        return result

递归解法

class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        output = []
        def backtrack(index, subsets):
            output.append(subsets[:])
            
            for i in range(index, len(nums)):
                subsets.append(nums[i])
                backtrack(i+1, subsets)
                subsets.pop()
                    
        backtrack(0, [])
        return output

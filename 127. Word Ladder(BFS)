127. Word Ladder

Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time.
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log","cog"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:

Code:
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        queue<string> wating;
		wating.push(beginWord);   //set a queue to run the BFS
		set<string> wordSet;
		for (string str : wordList) {   //convert List to Set and speed up searching process
			wordSet.insert(str);
		}
		int length = 1;
		while (!wating.empty()) {
			int size = wating.size();
			length++;
			for (int s = 0; s < size; s++) {
				string tempStr = wating.front();
				wating.pop();
				for (int i = 0; i < tempStr.length(); i++) {
					string temp = tempStr;
					wordSet.erase(tempStr); //escape duplicate 
					for (int j = 0; j < 26; j++) {
						temp[i] = 'a' + j;
						if (wordSet.find(temp) != wordSet.end()) {
							if (temp == endWord) {
								return length;   //encounting endword indicating we can get the shortest transformation sequence
							}
							wordSet.erase(temp);
							wating.push(temp);
						}
					}
				}
			}
		}
        return 0;
    }
};

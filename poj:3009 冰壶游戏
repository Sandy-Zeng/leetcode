题意：
就是要求把一个冰壶从起点“2”用最少的步数移动到终点“3”
其中0为移动区域，1为石头区域，冰壶一旦想着某个方向运动就不会停止，也不会改变方向（想想冰壶在冰上滑动），除非冰壶撞到石头1 或者 到达终点 3
冰壶撞到石头后，冰壶会停在石头前面，此时（静止状态）才允许改变冰壶的运动方向，而该块石头会破裂，石头所在的区域由1变为0. 也就是说，
冰壶撞到石头后，并不会取代石头的位置。终点是一个摩擦力很大的区域，冰壶若到达终点3，就会停止在终点的位置不再移动

思路：
（1）起点为“2”，也是一个可滑动的区域，所以标记起点位置之后，可以把起点当做0
（2）注意区分冰壶是运动的还是静止的，若是静止的话，旁边1格有石头是不能走的。
（3）输出冰壶从2到3的最短路，如果最短路的步数大于10（不包括10），视作无法走到终点（其实这是用来剪枝的）
（4）滑动过程中冰壶不允许出界

  1.谓的“走一步”，就是指冰壶从一个静止状态到下一个静止状态，就是说冰壶在运动时经过的“格数”不视作“步数”，也就是说冰壶每次移动的距离都是不定的。
  2.有就是由于石头会因为冰壶的碰撞而消失，因此冰壶每“走一步”，场地的环境就会改变一次。
  3.于（2），可以发现本题虽然是要找 “最短路”，但是BFS几乎不可能，因为每“走一步”，场地的状态就要改变一次；而如果该步不满足要求，又要求把场地的
    原到前一步，这只有DFS能做到。
  4.DFS不是BFS，不能简单地用它来找最短路，必须要把所有可能的路一一找出来，再逐一比较它们的步数才能确定最短。
    目值允许1000MS，此时就面临一个超时的问题。所以题目才同时给出“步数超过10则视为失败”的条件，这是用来剪枝的
    
  每走到一个静止位置递归深度加1
  
 Code:
#include<iostream>
#include<stdio.h>
#include<string.h>
#include<queue>
using namespace std;

short maze[20][20];
int w,h;

int DFS(int moves,int i,int j)   //moves 当前走了多少步，i,j为当前静止位置
{
    if(moves>10)return moves;    //大于10步就不走了
    moves++;
    int tempi = i;int tempj = j;
    int tempMoves = 11;          //步数肯定不会大于11
    //分别从四个方向判断是否可以滑动
    if(tempi-1>=0 && maze[tempi-1][tempj]!=1)
    {
         while(tempi-1>=0 && maze[tempi-1][tempj]!=1)
        {
             tempi--;
            if(maze[tempi][tempj]==3)return moves;      //碰到出口了就返回
        }
        if(tempi>0)               //碰到石头
        {
            maze[tempi-1][tempj] = 0;    //将石头位置置为0
            tempMoves = min(tempMoves,DFS(moves,tempi,tempj)); //递归找下一步
            maze[tempi-1][tempj] = 1;    //回溯 恢复原状态
        }
    }
     tempi = i; tempj = j;
     if(tempj-1>=0 && maze[tempi][tempj-1]!=1)
     {
         while(tempj>=0 && maze[tempi][tempj-1]!=1)
        {
            tempj--;
            if(maze[tempi][tempj]==3)return moves;
        }
        if(tempj>0)
        {
            maze[tempi][tempj-1] = 0;
            tempMoves = min(tempMoves,DFS(moves,tempi,tempj)); //回溯
            maze[tempi][tempj-1] = 1;
        }
     }
     tempi = i; tempj = j;
     if(tempi+1<h && maze[tempi+1][tempj]!=1)
     {
         while(tempi+1<h && maze[tempi+1][tempj]!=1)
        {
            tempi++;
            if(maze[tempi][tempj]==3)return moves;
        }
        if(tempi<h-1)
        {
            maze[tempi+1][tempj] = 0;
            tempMoves = min(tempMoves,DFS(moves,tempi,tempj)); //回溯
            maze[tempi+1][tempj] = 1;
        }
     }
     tempi = i; tempj = j;
     if(tempj+1<w && maze[tempi][tempj+1]!=1)
     {
         while(tempj+1<w && maze[tempi][tempj+1]!=1)
        {
            tempj++;
            if(maze[tempi][tempj]==3)return moves;
        }
        if(tempj<w-1)
        {
            maze[tempi][tempj+1] = 0;
            tempMoves = min(tempMoves,DFS(moves,tempi,tempj)); //回溯
            maze[tempi][tempj+1] = 1;
        }
     }
     //四个方向都走一遍，回溯可以得到走四个方向需要的步数，取最小的那个，如果方案不可行，步数>10
     return tempMoves;
}

int main()
{
    cin>>w>>h;
    while(w!=0&&h!=0)
    {
        int si,sj;
        memset(maze,0,sizeof(maze));
        for(int i=0;i<h;i++)
        {
            for(int j=0;j<w;j++)
            {
                cin>>maze[i][j];
                if(maze[i][j]==2)
                {
                    si = i;
                    sj = j;
                }
            }
        }
        int moves = DFS(0,si,sj);
        if(moves>10)       
            cout<<-1<<endl;
        else
            cout<<moves<<endl;
        cin>>w>>h;
    }
}

Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking 
about the node number and not the value in the nodes.

You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

Example 1:

Input: 1->2->3->4->5->NULL
Output: 1->3->5->2->4->NULL

用两个指针，一个快一个慢
Odd和Even要同时进行，否则Even的连接会断掉

Code:
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def oddEvenList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head==None or head.next == None:
            return head
        oddHead = head
        evenHead = head.next
        fasterOdd = oddHead
        fasterEven = evenHead
        slowOdd = oddHead
        slowEven = evenHead
        while fasterOdd.next!=None and fasterEven.next!=None:
            fasterOdd = fasterOdd.next.next
            slowOdd.next = fasterOdd
            slowOdd = fasterOdd
            fasterEven = fasterEven.next.next
            slowEven.next = fasterEven
            slowEven = fasterEven
        fasterOdd.next = evenHead
        return oddHead

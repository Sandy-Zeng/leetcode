Implement pow(x, n), which calculates x raised to the power n (xn).

Input: 2.00000, 10
Output: 1024.00000

Input: 2.00000, -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25

Note:
-100.0 < x < 100.0
n is a 32-bit signed integer, within the range [−231, 231 − 1]

解法：采用二分法，递归的切半，然后再将两半相乘一次，减少重复计算次数

Code:

class Solution {
public:
    double myPow(double x, int n) {
        int sign = (n < 0) ? -1 : 1;
		    if (n == 0)return 1；
		    long long k = abs((long long)n);   //注意overflow问题，负数最小为 -2^31，取绝对值 2^31会溢出，因此转换为long long类型
		    double result = recurPow(x, k);
		    return sign == 1 ? result : 1.0 / result;
    }
    
 double recurPow(double x, long long n) {
		if (n == 1)return x;
		double temp = recurPow(x, n / 2);
		if (n % 2 == 0) {
			return temp * temp;
		}
		else {
			return temp * temp * x;
		}
	}
};

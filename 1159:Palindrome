题意：
给出一个字符串，求出要这个字符串变为回文串，需要插入多少个字符

Input:
5
Ab3bd
Output:
2

动态规划转移方程：
填充一个右上角矩阵，
if(str[i] == str[j])
 dp[i][j] = dp[i+1][j-1];
else
 dp[i][j] = min(1+dp[i][j-1], 1+dp[i+1][j]);

采用动态数组，节省空间
if (str[i] == str[j])
    DP[k][j] = DP[1 - k][j - 1];
else
    DP[k][j] = min(DP[1 - k][j], DP[k][j - 1]) + 1;


解法1：
填充右上角矩阵
#include<iostream>
#include<algorithm>
#include<string>
using namespace std;

int dp[5003][5003];  //采用全局数组分配的方式 防止爆栈，同时加快空间分配的速度，同等情况下，动态数组分配用时较长

int main() {
	int n;
	cin >> n;
	string str;
	cin >> str;
	for (int i = n-1 ; i >= 0 ; i--) {
		for (int j = i+1; j <= n; j++) {
			if (str[i] == str[j-1])dp[i][j] = dp[i + 1][j - 1];
			else dp[i][j] = min(dp[i][j - 1] + 1, dp[i + 1][j] + 1);
		}
	}
	cout << dp[n][n]/2<< endl;
	system("pause");
	return 0;
}


解法2：
动态规划填充整个矩阵，回文串的特点是正着读和反着读是一样的，则将原始字符串逆序，采用编辑距离的方法，填充整个矩阵
则矩阵右下角的值为两个字符串变为相同时需要插入的字符总数，将该数目除以2即为一个字符串需要操作的次数
HINT:
该方法采用动态分配内存的方式会超时，
#include<iostream>
#include<algorithm>
#include<string>
using namespace std;
int dp[5003][5003];
int main() {
	int n;
	cin >> n;
	string str;
	cin >> str;
	for (int i = 0; i < n + 1; i++) {            //初始化第一行和第一列
		dp[i][0] = i;
	}
	for (int j = 0; j < n + 1; j++) {
		dp[0][j] = j;
	}
	for (int i = 1; i < n + 1; i++) {
		for (int j = 1; j < n + 1; j++) {
			if (str[i - 1] == str[n - j])dp[i][j] = dp[i - 1][j - 1];
			else dp[i][j] = min(dp[i][j - 1] + 1, dp[i - 1][j] + 1);
		}
	}
	cout << dp[n][n]/2<< endl;
	system("pause");
	return 0;
}


最长回文子串：
给出一个字符串，找出该字符串中的最长回文子串。

解法1：O（N^2）
如果一段字符串是回文，那么以某个字符为中心的前缀和后缀都是相同的，例如以一段回文串“aba”为例，以b为中心，它的前缀和后缀都是相同的，都是a。
那么，我们可以枚举中心位置，然后再在该位置上用扩展法，记录并更新得到的最长的回文长度

int LongestPalindrome(const char *s, int n)
{
    int i, j, max,c;
    if (s == 0 || n < 1)
        return 0;
    max = 0;

    for (i = 0; i < n; ++i) { // i is the middle point of the palindrome  
        for (j = 0; (i - j >= 0) && (i + j < n); ++j){ // if the length of the palindrome is odd  
            if (s[i - j] != s[i + j])
                break;
            c = j * 2 + 1;
        }
        if (c > max)
            max = c;
        for (j = 0; (i - j >= 0) && (i + j + 1 < n); ++j){ // for the even case  
            if (s[i - j] != s[i + j + 1])
                break;
            c = j * 2 + 2;
        }
        if (c > max)
            max = c;
    }
    return max;
}
在该代码中，里层两个for循环，分别区分字符串长度为奇数和偶数的情况。

解法2： O（N）Manacher算法
首先通过在每个字符的两边都插入一个特殊的符号，将所有可能的奇数或偶数长度的回文子串都转换成了奇数长度。比如 abba 变成 #a#b#b#a#， aba变成 #a#b#a#。
此外，为了进一步减少编码的复杂度，可以在字符串的开始加入另一个特殊字符，这样就不用特殊处理越界问题，比如$#a#b#a#。
以字符串12212321为例，插入#和$这两个特殊符号，变成了 S[] = "$#1#2#2#1#2#3#2#1#"，然后用一个数组 P[i] 来记录以字符S[i]为中心的最长回文子串向左或向右扩张的长度（包括S[i]）。
比如S和P的对应关系：
S # 1 # 2 # 2 # 1 # 2 # 3 # 2 # 1 #
P 1 2 1 2 5 2 1 4 1 2 1 6 1 2 1 2 1
可以看出，P[i]-1正好是原字符串中最长回文串的总长度，为5。
接下来怎么计算P[i]呢？Manacher算法增加两个辅助变量id和mx，其中id表示最大回文子串中心的位置，mx则为id+P[id]，也就是最大回文子串的边界。得到一个很重要的结论：
如果mx > i，那么P[i] >= Min(P[2 * id - i], mx - i)

下面，令j = 2*id - i，也就是说j是i关于id的对称点。
当 mx - i > P[j] 的时候，以S[j]为中心的回文子串包含在以S[id]为中心的回文子串中，由于i和j对称，以S[i]为中心的回文子串必然包含在以S[id]为中心的回文子串中，所以必有P[i] = P[j]
；
当 P[j] >= mx - i 的时候，以S[j]为中心的回文子串不一定完全包含于以S[id]为中心的回文子串中，但是基于对称性可知，下图中两个绿框所包围的部分是相同的，也就是说以S[i]为中心的回文子串，其向右至少会扩张到mx的位置，也就是说 P[i] >= mx - i。
至于mx之后的部分是否对称，再具体匹配。
此外，对于 mx <= i 的情况，因为无法对 P[i]做更多的假设，只能让P[i] = 1，然后再去匹配。
//输入，并处理得到字符串s
int p[1000], mx = 0, id = 0;
memset(p, 0, sizeof(p));
for (i = 1; s[i] != '\0'; i++) 
{
    p[i] = mx > i ? min(p[2 * id - i], mx - i) : 1;
    while (s[i + p[i]] == s[i - p[i]]) 
        p[i]++;
    if (i + p[i] > mx) 
    {
        mx = i + p[i];
        id = i;
    }
}

此Manacher算法使用id、mx做配合，可以在每次循环中，直接对P[i]的快速赋值，从而在计算以i为中心的回文子串的过程中，不必每次都从1开始比较，减少了比较次数，
最终使得求解最长回文子串的长度达到线性O(N)的时间复杂度。
参考：
https://wizardforcel.gitbooks.io/the-art-of-programming-by-july/content/01.05.html


最长回文子序列问题：
LPS（Longest Palindromic Subsequence）
一个字符串有许多子序列，比如字符串cabbeaf，它的子序列有c、abb、e、a、f，可以通过删除某些字符而变成回文字符串，字符串“cabbeaf”，
删掉‘c’、'e'、‘f’后剩下的子串“abba”就是回文字符串，也是其中最长的回文子序列。注意和最长回文子串的区别，
最长回文子串必须是连续的，这里的最长回文子序列，可以是不连续的，这就是最长回文子序列LPS问题。
方法一：递归方法

str[0...n-1]是给定的字符串序列，长度为n，假设lps(0,n-1)表示序列str[0...n-1]的最长回文子序列的长度。

1.如果str的最后一个元素和第一个元素是相同的，则有：lps(0,n-1)=lps(1,n-2)+2；例如字符串序列“AABACACBA”，第一个元素和最后一个元素相同，其中lps(1,n-2)表示红色部分的最长回文子序列的长度；

2.如果str的最后一个元素和第一个元素是不相同的，则有：lps(0,n-1)=max(lps(1,n-1),lps(0,n-2))；例如字符串序列“ABACACB”，其中lps(1,n-1)表示去掉第一元素的子序列，lps(0,n-2)表示去掉最后一个元素的子序列。





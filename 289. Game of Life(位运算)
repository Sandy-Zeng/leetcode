Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):

Any live cell with fewer than two live neighbors dies, as if caused by under-population.
Any live cell with two or three live neighbors lives on to the next generation.
Any live cell with more than three live neighbors dies, as if by over-population..
Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
Write a function to compute the next state (after one update) of the board given its current state.

计算每个方格旁边8个方格中为1的方格数量，然后根据以上四条规则，更新方格的状态。如何用O（1）的空间复杂度解决？

Solution：
  用2个bit分别存储当前状态和下一个状态，然后通过右移一位运算更新方格状态
  [2nd bit, 1st bit] = [next state, current state]
  - 00  dead (next) <- dead (current)
  - 01  dead (next) <- live (current)  
  - 10  live (next) <- dead (current)  
  - 11  live (next) <- live (current)
 
 初始状态，每个空格的状态为00或01，然后通过遍历计数每个方格周围八个方格当前状态为1的方格数目，然后根据以上规则，需要做以下两种更新
 For each cell's 1st bit, check the 8 pixels around itself, and set the cell's 2nd bit.
  Transition 01 -> 11: when board == 1 and lives >= 2 && lives <= 3.
  Transition 00 -> 10: when board == 0 and lives == 3.

 要得到当前的状态与1做与运算，得到低位： board[i][j] & 1
 得到下一个时刻状态，右移一位，得到高位： board[i][j] >> 1
 
 该算法的时间复杂度为O（mn），空间复杂度为O（1）

Code：
class Solution {
public:
	void gameOfLife(vector<vector<int>>& board) {
		int m = board.size();
		if (m == 0)return;
		int n = board[0].size();
		for (int i = 0; i < m; ++i) {
			for (int j = 0; j < n; ++j) {
				int live = countLive(board, m, n, i, j);
				if (board[i][j] && live >= 2 && live <= 3)board[i][j] = 3;
				if (board[i][j] == 0 && live == 3)board[i][j] = 2;
			}
		}
		for (int i = 0; i < m; ++i) {
			for (int j = 0; j < n; ++j) {
				board[i][j]>>=1;
			}
		}

	}

	int countLive(vector<vector<int>>& board,int m,int n,int i,int j) {
		int live = 0;
		for (int x = min(i - 1, 0); x < max(i + 1, m - 1); x++) {
			for (int y = min(j - 1, 0); y < max(j + 1, n - 1); y++) {
				live += board[x][y] & 1;
			}
		}
		live -= board[i][j] & 1;
		return live;
	}
};

  

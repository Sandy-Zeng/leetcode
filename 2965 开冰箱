题意：
一个冰箱有16个把手，-表示open +表示close，每次可以改变一个位置的把手的状态，若改变第i行第j列的把手，则相应的第i行的所有把手，第j行的所有把手状态都要
改变。问最少需要多少次改变状态，才能将冰箱打开，即所有把手都处于open状态

Input:

-+--
----
----
-+--

Output:
6
1 1
1 3
1 4
4 1
4 3
4 4

做法：采用DFS，加位运算
对每个把手，可以翻转其状态或不翻转，采用DFS进行枚举


//2965

#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<string.h>
using namespace std;

struct point
{
    int x;
    int y;
    point(int a,int b)
    {
        x = a;
        y = b;
    }
    point()
    {
        x = 0;
        y = 0;
    }
};

unsigned short status;// current status
point trace[16]; //保存结果
point temp [16]; //暂存结果
int shortPath;  //最短路径长度

unsigned short filp(int x,int y,unsigned short s) //翻转第i个把手
{
    int index = 15-(x*4+y);
    s = s ^ (1<<index); //采用异或运算，可以将第i位从1变为0，或从0变为1
    return s;
}

unsigned short shift(int index,unsigned short s)
{
    int x = index/4;
    int y = index%4;
    s = filp(x,y,s);
    for(int i=0;i<4;i++)  //翻转所有第i行，第j列的把手
    {
        if(i!=y)
            s = filp(x,i,s);
        if(i!=x)
            s = filp(i,y,s);
    }
    return s;
}

void print(unsigned short s)
{
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<4;j++)
        {
            int index = 15 - (4*i+j);
            int key = s&(1<<index);
            if(key==0)
            {
                cout<<"+";
            }
            else
            {
                cout<<"-";
            }
        }
        cout<<endl;
    }
    cout<<endl;
}


void enumurateFlip(unsigned short s,int depth,int index) //DFS
{
    if(s==0xffff) //all flip
    {
        if(depth<shortPath)   //如果当前的最大深小于最短路径的长度，则保存结果
        {
            shortPath = depth;
            for(int k=0;k<depth;k++)
            {
                trace[k] = temp[k];
            }
        }
        return;
    }

    if(index>=16)return;   //翻转的把手的序号大于16
    enumurateFlip(s,depth,index+1);  //不翻转这个把手，翻转下一个把手

    int x = index/4+1;  //计算行列编号
    int y = index%4+1;
    point action(x,y);
    unsigned short tempS = s;
    s = shift(index,s);  //翻转第index个把手
    temp[depth] = action;
    enumurateFlip(s,depth+1,index+1); //dfs递归
    s = tempS; //回溯
    return;
}

int main()
{
    unsigned short initState = 0;
    memset(record,false,sizeof(record));
    shortPath = 10000;
    char c;
    cin>>c;
    if(c=='-') //open
    {
        initState = 1;
    }
    else //close
    {
        initState = 0;
    }
    for(int i=1;i<16;i++)
    {
        char c;
        cin>>c;
        if(c=='-') //open
        {
            initState = (initState<<1) + 1;
        }
        else //close
        {
            initState = initState<<1;
        }
    }
    //print(initState);
    enumurateFlip(initState,0,0);

    cout<<shortPath<<endl;
    for(int i=0;i<shortPath;i++)
    {
        cout<<trace[i].x<<" "<<trace[i].y<<endl;
    }
    return 0;
}
